'''
re模块本身只是用来操作正则表达式的
和正则本身没关系，正则表达式是一种规则
'''
# 正则表达式  是一种规则  匹配字符串的规则

# 正则规则（元字符，量词）
    # 第一条规则：本身是哪一个字符，就匹配字符串中的拿一个字符
    # 第二条规则：字符组[字符1字符2]，字符组会将字符组中的内容全部拆分成单个的字符，只要这个字符出现在字符串中，就可以匹配到
                # 匹配数字：匹配数字的话还可以[0-9]这样去操作，但是所有的都只能按照ASCII从小往大排，不可以从大往下小排
                # 匹配大小写：有这样一种情况，就是要匹配大写或小写字母，该怎么办？
                             # 如果写[A-z]这样的确是可以把大小写全部匹配到，但是中间也会夹杂这其他的符号
                             # 其实可以这样[a-zA-Z],只要保证 - 符号左边小于右边的ASCII就可以，两个不同的范围之间没有要求
                # 匹配大小写或者是数字：[a-zA-Z0-9]
    # 元字符：
                # \d：表示所有的数字
                # \w：标识符，也就是变量，变量是由数字字母下划线组成的，因此表示  数字、字母、下划线
                # \s：space 匹配所有的空格、换行符、制表符
                # \D：匹配所有的非数字
                # \W：匹配所有的非标识符，即所有的非数字、非字母、非下划线
                # \S：匹配所有的非空白，即非空格、非制表符、非换行符
                # \t：table 专门匹配制表符
                # \n：next 专门匹配换行符
                # [\W\w]  [\S\s]  [\D\d]代表能够匹配任意内容
                # . 表示除了换行符之外的任意内容
    # [] 字符组：只要是在中括号内的所有字符都是符合规则的字符
    # [^] 非字符组：只要是在中括号内的所有字符都是不符合规则的字符
    # ^ 表示一个字符的开始
    # $ 表示一个字符的结束
        # a     abc abc abc     匹配结果：3个，a  a  a
        # ^a     abc abc abc     匹配结果：1个，a
        # a$     abc abc abc     匹配结果：1个，a
        # ^ac$     abc abc abc     匹配结果：0个，什么都匹配不到，因为先定位一个开头，然后找a，再找c，没找到
        # ^abc$     abc abc abc     匹配结果：0个，什么都匹配不到，因为先定位一个开头，然后找a，再找b，再找c，最后定位结尾
                                    # 发现不是结尾，找不到
    # |或   ()分组
        # ab|abc     abc      匹配结果：1个   ab ，头脑特别简单，找a，找到了，找b找到了，此时发现ab是存在的，不往后走了
                # 改成abc|ab
        # www\.baidu|google\.com    www.baidu.com    匹配结果：1个   www.baidu    这种情况下该怎么办呢？
        # www\.(baidu|google)\.com    www.baidu.com   匹配结果：1个    www.baidu.com   表示 | 符号仅作用于括号内部

    # 量词：
            # {n} 表示匹配几次，并且只对前面的一个字符或者一个小整体起作用
            # {n,} 表示至少出现n次
            # {n,m} 表示至少出现n次至多出现m次
            # ？ 表示匹配0次或者1次
            # + 表示匹配1次或多次
            # * 表示匹配0次或多次

            # 匹配任意的两位整数  \d{2}
            # 保留任意数小数点后两位  \d+\.\d{2}
            # 匹配一个整数或者一个小数  \d+\.?\d+  这种情况可以匹配  12.  这种情况，但是这并不是一个准确的小数
                    # 那么该怎么办呢  \d+(\.\d+)?  给他分组，表示这个小数点要么不出现，要出现就和后面的小数一起出现

    # 贪婪匹配算法：python正则表达式中默认是贪婪算法，比如说  \d+3  1287328287372873233328736434
                    # 会一直匹配到最后，然后发现结尾数字得是3，然后就往回找，找到一个3就结束
    # 非贪婪匹配算法：怎么样做到非贪婪匹配算法呢？
            # 在量词的后面加 ？ 就可以达到非贪婪的效果 比如： \d+?  12.52 13.47   匹配结果：1 2 5 2 1 3 4 7
            # \d{2,3}?  只会匹配2次，不会匹配3次。
            # \d+?3  表示取任意长度的数字，直到遇到第一个3
    # 非贪婪最常用用法：
        # 元字符 量词 ？ x
        # 表示按照元字符规则在量词范围内匹配，一旦遇到x就停止
        # .*?x 匹配任意内容任意多次，遇到x就立即停止

    # 实战小练习：
        # 李杰和李莲英和李二棍子和李傻子
        # 李[^和]+

    # 身份证号的正则表达式：[1-9]((\d{13}\d$)|(\d{16}[\dX]$))



